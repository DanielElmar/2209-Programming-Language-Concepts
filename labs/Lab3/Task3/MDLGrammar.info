-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from MDLGrammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseMDL -> Exp                             (0)
	Exp -> if Exp then Exp else Exp                    (1)
	Exp -> forward int                                 (2)
	Exp -> forward digit                               (3)
	Exp -> rotate Direction                            (4)
	Exp -> obstacle digit                              (5)
	Exp -> Exp ';' Exp                                 (6)
	Exp -> '(' Exp ')'                                 (7)
	Direction -> l                                     (8)
	Direction -> r                                     (9)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	forward        { TokenForward p }
	digit          { TokenDigit p $$ }
	int            { TokenInt p $$ }
	l              { TokenLeft p }
	r              { TokenRight p }
	rotate         { TokenRotate p }
	obstacle       { TokenObstacle p }
	if             { TokenIf p }
	then           { TokenThen p }
	else           { TokenElse p }
	'('            { TokenLParen p }
	')'            { TokenRParen  p }
	';'            { TokenSeq p }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseMDL rule  0
	Exp             rules 1, 2, 3, 4, 5, 6, 7
	Direction       rules 8, 9

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseMDL -> . Exp                            (rule 0)

	forward        shift, and enter state 4
	rotate         shift, and enter state 5
	obstacle       shift, and enter state 6
	if             shift, and enter state 2
	'('            shift, and enter state 7

	Exp            goto state 3

State 1

	Exp -> . if Exp then Exp else Exp                   (rule 1)

	if             shift, and enter state 2


State 2

	Exp -> if . Exp then Exp else Exp                   (rule 1)

	forward        shift, and enter state 4
	rotate         shift, and enter state 5
	obstacle       shift, and enter state 6
	if             shift, and enter state 2
	'('            shift, and enter state 7

	Exp            goto state 16

State 3

	%start_parseMDL -> Exp .                            (rule 0)
	Exp -> Exp . ';' Exp                                (rule 6)

	';'            shift, and enter state 15
	%eof           accept


State 4

	Exp -> forward . int                                (rule 2)
	Exp -> forward . digit                              (rule 3)

	digit          shift, and enter state 13
	int            shift, and enter state 14


State 5

	Exp -> rotate . Direction                           (rule 4)

	l              shift, and enter state 11
	r              shift, and enter state 12

	Direction      goto state 10

State 6

	Exp -> obstacle . digit                             (rule 5)

	digit          shift, and enter state 9


State 7

	Exp -> '(' . Exp ')'                                (rule 7)

	forward        shift, and enter state 4
	rotate         shift, and enter state 5
	obstacle       shift, and enter state 6
	if             shift, and enter state 2
	'('            shift, and enter state 7

	Exp            goto state 8

State 8

	Exp -> Exp . ';' Exp                                (rule 6)
	Exp -> '(' Exp . ')'                                (rule 7)

	')'            shift, and enter state 19
	';'            shift, and enter state 15


State 9

	Exp -> obstacle digit .                             (rule 5)

	then           reduce using rule 5
	else           reduce using rule 5
	')'            reduce using rule 5
	';'            reduce using rule 5
	%eof           reduce using rule 5


State 10

	Exp -> rotate Direction .                           (rule 4)

	then           reduce using rule 4
	else           reduce using rule 4
	')'            reduce using rule 4
	';'            reduce using rule 4
	%eof           reduce using rule 4


State 11

	Direction -> l .                                    (rule 8)

	then           reduce using rule 8
	else           reduce using rule 8
	')'            reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 12

	Direction -> r .                                    (rule 9)

	then           reduce using rule 9
	else           reduce using rule 9
	')'            reduce using rule 9
	';'            reduce using rule 9
	%eof           reduce using rule 9


State 13

	Exp -> forward digit .                              (rule 3)

	then           reduce using rule 3
	else           reduce using rule 3
	')'            reduce using rule 3
	';'            reduce using rule 3
	%eof           reduce using rule 3


State 14

	Exp -> forward int .                                (rule 2)

	then           reduce using rule 2
	else           reduce using rule 2
	')'            reduce using rule 2
	';'            reduce using rule 2
	%eof           reduce using rule 2


State 15

	Exp -> Exp ';' . Exp                                (rule 6)

	forward        shift, and enter state 4
	rotate         shift, and enter state 5
	obstacle       shift, and enter state 6
	if             shift, and enter state 2
	'('            shift, and enter state 7

	Exp            goto state 18

State 16

	Exp -> if Exp . then Exp else Exp                   (rule 1)
	Exp -> Exp . ';' Exp                                (rule 6)

	then           shift, and enter state 17
	';'            shift, and enter state 15


State 17

	Exp -> if Exp then . Exp else Exp                   (rule 1)

	forward        shift, and enter state 4
	rotate         shift, and enter state 5
	obstacle       shift, and enter state 6
	if             shift, and enter state 2
	'('            shift, and enter state 7

	Exp            goto state 20

State 18

	Exp -> Exp . ';' Exp                                (rule 6)
	Exp -> Exp ';' Exp .                                (rule 6)

	then           reduce using rule 6
	else           reduce using rule 6
	')'            reduce using rule 6
	';'            shift, and enter state 15
	%eof           reduce using rule 6


State 19

	Exp -> '(' Exp ')' .                                (rule 7)

	then           reduce using rule 7
	else           reduce using rule 7
	')'            reduce using rule 7
	';'            reduce using rule 7
	%eof           reduce using rule 7


State 20

	Exp -> if Exp then Exp . else Exp                   (rule 1)
	Exp -> Exp . ';' Exp                                (rule 6)

	else           shift, and enter state 21
	';'            shift, and enter state 15


State 21

	Exp -> if Exp then Exp else . Exp                   (rule 1)

	forward        shift, and enter state 4
	rotate         shift, and enter state 5
	obstacle       shift, and enter state 6
	if             shift, and enter state 2
	'('            shift, and enter state 7

	Exp            goto state 22

State 22

	Exp -> if Exp then Exp else Exp .                   (rule 1)
	Exp -> Exp . ';' Exp                                (rule 6)

	then           reduce using rule 1
	else           reduce using rule 1
	')'            reduce using rule 1
	';'            shift, and enter state 15
	%eof           reduce using rule 1


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 10
Number of terminals: 13
Number of non-terminals: 3
Number of states: 23
