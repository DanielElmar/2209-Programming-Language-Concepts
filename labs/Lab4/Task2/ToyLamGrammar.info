-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from ToyLamGrammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseToyLam -> Exp                          (0)
	Exp -> digit                                       (1)
	Exp -> true                                        (2)
	Exp -> false                                       (3)
	Exp -> Exp '<' Exp                                 (4)
	Exp -> Exp '+' Exp                                 (5)
	Exp -> var                                         (6)
	Exp -> if Exp then Exp else Exp                    (7)
	Exp -> lam var '->' Exp                            (8)
	Exp -> let var '=' Exp in Exp                      (9)
	Exp -> Exp Exp                                     (10)
	Exp -> Exp ';' Exp                                 (11)
	Exp -> '(' Exp ')'                                 (12)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	lam            { TokenLambda p }
	var            { TokenVar p $$ }
	'->'           { TokenAbs p }
	';'            { TokenSeq p }
	'('            { TokenLParen p }
	')'            { TokenRParen  p }
	if             { TokenIf p }
	then           { TokenThen p }
	else           { TokenElse p }
	let            { TokenLet p }
	in             { TokenIn p }
	'='            { TokenEq p }
	digit          { TokenDigit p $$ }
	'<'            { TokenLessThan p }
	'+'            { TokenPlus p }
	true           { TokenTure p }
	false          { TokenFalse p }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseToyLam rule  0
	Exp             rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseToyLam -> . Exp                         (rule 0)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6
	if             shift, and enter state 7
	let            shift, and enter state 8
	digit          shift, and enter state 2
	true           shift, and enter state 9
	false          shift, and enter state 10

	Exp            goto state 3

State 1

	Exp -> . digit                                      (rule 1)

	digit          shift, and enter state 2


State 2

	Exp -> digit .                                      (rule 1)

	lam            reduce using rule 1
	var            reduce using rule 1
	';'            reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	if             reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	let            reduce using rule 1
	in             reduce using rule 1
	digit          reduce using rule 1
	'<'            reduce using rule 1
	'+'            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parseToyLam -> Exp .                         (rule 0)
	Exp -> Exp . '<' Exp                                (rule 4)
	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . Exp                                    (rule 10)
	Exp -> Exp . ';' Exp                                (rule 11)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	';'            shift, and enter state 16
	'('            shift, and enter state 6
	if             shift, and enter state 7
	let            shift, and enter state 8
	digit          shift, and enter state 2
	'<'            shift, and enter state 17
	'+'            shift, and enter state 18
	true           shift, and enter state 9
	false          shift, and enter state 10
	%eof           accept

	Exp            goto state 15

State 4

	Exp -> lam . var '->' Exp                           (rule 8)

	var            shift, and enter state 14


State 5

	Exp -> var .                                        (rule 6)

	lam            reduce using rule 6
	var            reduce using rule 6
	';'            reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	if             reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	let            reduce using rule 6
	in             reduce using rule 6
	digit          reduce using rule 6
	'<'            reduce using rule 6
	'+'            reduce using rule 6
	true           reduce using rule 6
	false          reduce using rule 6
	%eof           reduce using rule 6


State 6

	Exp -> '(' . Exp ')'                                (rule 12)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6
	if             shift, and enter state 7
	let            shift, and enter state 8
	digit          shift, and enter state 2
	true           shift, and enter state 9
	false          shift, and enter state 10

	Exp            goto state 13

State 7

	Exp -> if . Exp then Exp else Exp                   (rule 7)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6
	if             shift, and enter state 7
	let            shift, and enter state 8
	digit          shift, and enter state 2
	true           shift, and enter state 9
	false          shift, and enter state 10

	Exp            goto state 12

State 8

	Exp -> let . var '=' Exp in Exp                     (rule 9)

	var            shift, and enter state 11


State 9

	Exp -> true .                                       (rule 2)

	lam            reduce using rule 2
	var            reduce using rule 2
	';'            reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	if             reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	let            reduce using rule 2
	in             reduce using rule 2
	digit          reduce using rule 2
	'<'            reduce using rule 2
	'+'            reduce using rule 2
	true           reduce using rule 2
	false          reduce using rule 2
	%eof           reduce using rule 2


State 10

	Exp -> false .                                      (rule 3)

	lam            reduce using rule 3
	var            reduce using rule 3
	';'            reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	if             reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	let            reduce using rule 3
	in             reduce using rule 3
	digit          reduce using rule 3
	'<'            reduce using rule 3
	'+'            reduce using rule 3
	true           reduce using rule 3
	false          reduce using rule 3
	%eof           reduce using rule 3


State 11

	Exp -> let var . '=' Exp in Exp                     (rule 9)

	'='            shift, and enter state 25


State 12

	Exp -> Exp . '<' Exp                                (rule 4)
	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> if Exp . then Exp else Exp                   (rule 7)
	Exp -> Exp . Exp                                    (rule 10)
	Exp -> Exp . ';' Exp                                (rule 11)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	';'            shift, and enter state 16
	'('            shift, and enter state 6
	if             shift, and enter state 7
	then           shift, and enter state 24
	let            shift, and enter state 8
	digit          shift, and enter state 2
	'<'            shift, and enter state 17
	'+'            shift, and enter state 18
	true           shift, and enter state 9
	false          shift, and enter state 10

	Exp            goto state 15

State 13

	Exp -> Exp . '<' Exp                                (rule 4)
	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . Exp                                    (rule 10)
	Exp -> Exp . ';' Exp                                (rule 11)
	Exp -> '(' Exp . ')'                                (rule 12)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	';'            shift, and enter state 16
	'('            shift, and enter state 6
	')'            shift, and enter state 23
	if             shift, and enter state 7
	let            shift, and enter state 8
	digit          shift, and enter state 2
	'<'            shift, and enter state 17
	'+'            shift, and enter state 18
	true           shift, and enter state 9
	false          shift, and enter state 10

	Exp            goto state 15

State 14

	Exp -> lam var . '->' Exp                           (rule 8)

	'->'           shift, and enter state 22


State 15

	Exp -> Exp . '<' Exp                                (rule 4)
	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . Exp                                    (rule 10)
	Exp -> Exp Exp .                                    (rule 10)
	Exp -> Exp . ';' Exp                                (rule 11)

	lam            reduce using rule 10
	var            reduce using rule 10
	';'            shift, and enter state 16
	'('            shift, and enter state 6
	')'            reduce using rule 10
	if             reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	let            reduce using rule 10
	in             reduce using rule 10
	digit          reduce using rule 10
	'<'            shift, and enter state 17
	'+'            reduce using rule 10
	true           shift, and enter state 9
	false          shift, and enter state 10
	%eof           reduce using rule 10

	Exp            goto state 15

State 16

	Exp -> Exp ';' . Exp                                (rule 11)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6
	if             shift, and enter state 7
	let            shift, and enter state 8
	digit          shift, and enter state 2
	true           shift, and enter state 9
	false          shift, and enter state 10

	Exp            goto state 21

State 17

	Exp -> Exp '<' . Exp                                (rule 4)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6
	if             shift, and enter state 7
	let            shift, and enter state 8
	digit          shift, and enter state 2
	true           shift, and enter state 9
	false          shift, and enter state 10

	Exp            goto state 20

State 18

	Exp -> Exp '+' . Exp                                (rule 5)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6
	if             shift, and enter state 7
	let            shift, and enter state 8
	digit          shift, and enter state 2
	true           shift, and enter state 9
	false          shift, and enter state 10

	Exp            goto state 19

State 19

	Exp -> Exp . '<' Exp                                (rule 4)
	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp '+' Exp .                                (rule 5)
	Exp -> Exp . Exp                                    (rule 10)
	Exp -> Exp . ';' Exp                                (rule 11)

	lam            reduce using rule 5
	var            reduce using rule 5
	';'            shift, and enter state 16
	'('            shift, and enter state 6
	')'            reduce using rule 5
	if             reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	let            reduce using rule 5
	in             reduce using rule 5
	digit          reduce using rule 5
	'<'            shift, and enter state 17
	'+'            reduce using rule 5
	true           shift, and enter state 9
	false          shift, and enter state 10
	%eof           reduce using rule 5

	Exp            goto state 15

State 20

	Exp -> Exp . '<' Exp                                (rule 4)
	Exp -> Exp '<' Exp .                                (rule 4)
	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . Exp                                    (rule 10)
	Exp -> Exp . ';' Exp                                (rule 11)

	lam            reduce using rule 4
	var            reduce using rule 4
	';'            reduce using rule 4
	'('            fail
	')'            reduce using rule 4
	if             reduce using rule 4
	then           reduce using rule 4
	else           reduce using rule 4
	let            reduce using rule 4
	in             reduce using rule 4
	digit          reduce using rule 4
	'<'            fail
	'+'            reduce using rule 4
	true           fail
	false          fail
	%eof           reduce using rule 4

	Exp            goto state 15

State 21

	Exp -> Exp . '<' Exp                                (rule 4)
	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . Exp                                    (rule 10)
	Exp -> Exp . ';' Exp                                (rule 11)
	Exp -> Exp ';' Exp .                                (rule 11)

	lam            reduce using rule 11
	var            reduce using rule 11
	';'            shift, and enter state 16
	'('            shift, and enter state 6
	')'            reduce using rule 11
	if             reduce using rule 11
	then           reduce using rule 11
	else           reduce using rule 11
	let            reduce using rule 11
	in             reduce using rule 11
	digit          reduce using rule 11
	'<'            shift, and enter state 17
	'+'            reduce using rule 11
	true           shift, and enter state 9
	false          shift, and enter state 10
	%eof           reduce using rule 11

	Exp            goto state 15

State 22

	Exp -> lam var '->' . Exp                           (rule 8)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6
	if             shift, and enter state 7
	let            shift, and enter state 8
	digit          shift, and enter state 2
	true           shift, and enter state 9
	false          shift, and enter state 10

	Exp            goto state 28

State 23

	Exp -> '(' Exp ')' .                                (rule 12)

	lam            reduce using rule 12
	var            reduce using rule 12
	';'            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	if             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	let            reduce using rule 12
	in             reduce using rule 12
	digit          reduce using rule 12
	'<'            reduce using rule 12
	'+'            reduce using rule 12
	true           reduce using rule 12
	false          reduce using rule 12
	%eof           reduce using rule 12


State 24

	Exp -> if Exp then . Exp else Exp                   (rule 7)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6
	if             shift, and enter state 7
	let            shift, and enter state 8
	digit          shift, and enter state 2
	true           shift, and enter state 9
	false          shift, and enter state 10

	Exp            goto state 27

State 25

	Exp -> let var '=' . Exp in Exp                     (rule 9)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6
	if             shift, and enter state 7
	let            shift, and enter state 8
	digit          shift, and enter state 2
	true           shift, and enter state 9
	false          shift, and enter state 10

	Exp            goto state 26

State 26

	Exp -> Exp . '<' Exp                                (rule 4)
	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> let var '=' Exp . in Exp                     (rule 9)
	Exp -> Exp . Exp                                    (rule 10)
	Exp -> Exp . ';' Exp                                (rule 11)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	';'            shift, and enter state 16
	'('            shift, and enter state 6
	if             shift, and enter state 7
	let            shift, and enter state 8
	in             shift, and enter state 30
	digit          shift, and enter state 2
	'<'            shift, and enter state 17
	'+'            shift, and enter state 18
	true           shift, and enter state 9
	false          shift, and enter state 10

	Exp            goto state 15

State 27

	Exp -> Exp . '<' Exp                                (rule 4)
	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> if Exp then Exp . else Exp                   (rule 7)
	Exp -> Exp . Exp                                    (rule 10)
	Exp -> Exp . ';' Exp                                (rule 11)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	';'            shift, and enter state 16
	'('            shift, and enter state 6
	if             shift, and enter state 7
	else           shift, and enter state 29
	let            shift, and enter state 8
	digit          shift, and enter state 2
	'<'            shift, and enter state 17
	'+'            shift, and enter state 18
	true           shift, and enter state 9
	false          shift, and enter state 10

	Exp            goto state 15

State 28

	Exp -> Exp . '<' Exp                                (rule 4)
	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> lam var '->' Exp .                           (rule 8)
	Exp -> Exp . Exp                                    (rule 10)
	Exp -> Exp . ';' Exp                                (rule 11)

	lam            reduce using rule 8
	var            reduce using rule 8
	';'            reduce using rule 8
	'('            fail
	')'            reduce using rule 8
	if             reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	let            reduce using rule 8
	in             reduce using rule 8
	digit          reduce using rule 8
	'<'            fail
	'+'            reduce using rule 8
	true           fail
	false          fail
	%eof           reduce using rule 8

	Exp            goto state 15

State 29

	Exp -> if Exp then Exp else . Exp                   (rule 7)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6
	if             shift, and enter state 7
	let            shift, and enter state 8
	digit          shift, and enter state 2
	true           shift, and enter state 9
	false          shift, and enter state 10

	Exp            goto state 32

State 30

	Exp -> let var '=' Exp in . Exp                     (rule 9)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 6
	if             shift, and enter state 7
	let            shift, and enter state 8
	digit          shift, and enter state 2
	true           shift, and enter state 9
	false          shift, and enter state 10

	Exp            goto state 31

State 31

	Exp -> Exp . '<' Exp                                (rule 4)
	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> let var '=' Exp in Exp .                     (rule 9)
	Exp -> Exp . Exp                                    (rule 10)
	Exp -> Exp . ';' Exp                                (rule 11)

	lam            shift, and enter state 4
	var            reduce using rule 9
	';'            shift, and enter state 16
	'('            shift, and enter state 6
	')'            reduce using rule 9
	if             shift, and enter state 7
	then           reduce using rule 9
	else           reduce using rule 9
	let            shift, and enter state 8
	in             reduce using rule 9
	digit          reduce using rule 9
	'<'            shift, and enter state 17
	'+'            shift, and enter state 18
	true           shift, and enter state 9
	false          shift, and enter state 10
	%eof           reduce using rule 9

	Exp            goto state 15

State 32

	Exp -> Exp . '<' Exp                                (rule 4)
	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> if Exp then Exp else Exp .                   (rule 7)
	Exp -> Exp . Exp                                    (rule 10)
	Exp -> Exp . ';' Exp                                (rule 11)

	lam            shift, and enter state 4
	var            reduce using rule 7
	';'            shift, and enter state 16
	'('            shift, and enter state 6
	')'            reduce using rule 7
	if             shift, and enter state 7
	then           reduce using rule 7
	else           reduce using rule 7
	let            shift, and enter state 8
	in             reduce using rule 7
	digit          reduce using rule 7
	'<'            shift, and enter state 17
	'+'            shift, and enter state 18
	true           shift, and enter state 9
	false          shift, and enter state 10
	%eof           reduce using rule 7

	Exp            goto state 15

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 13
Number of terminals: 17
Number of non-terminals: 2
Number of states: 33
